<!-- ===================================================================== -->
<!-- Build Filename    : build.xml									       -->
<!-- Property Filename : build.properties						           -->
<!-- This build file is meant for building Singtel Business Portal project -->
<!-- ===================================================================== -->

<!-- ===================================================================== -->
<!-- ? possible default targets                                            -->
<!--    1. buildOIM                         		      		           -->
<!-- ===================================================================== -->

<project name="ticm-base" default="dist" basedir=".">

	<!-- Log the current timestamp -->
	<tstamp>
		<format property="CURR_DATETIME" pattern="dd/MM/yyyy hh:mm:ss"
			unit="hour" />
	</tstamp>

	<target name="usage">
		<echo message="ant [target]" />
		<echo message="Supported Build Options:" />
		<echo message="  compile --> compile java source files" />
		<echo message="  jar --> compile before jar-ing" />
		<echo
			message="  war --> cleans, build and war for web distribution" />
		<echo
			message="  warServlet--> war for pegasus servlet distribution" />
		<echo
			message="  clean   --> delete everything in the build folder as well as the build folder itself" />
		<echo message="  javadoc --> create javadocs" />
		<echo message="  junit --> run junit test" />
		<echo message="  junit.batch --> run a batch of junit tests" />
	</target>

	<target name="prepare">
		<property file="build.properties" />
		<property environment="env" />
	</target>

	<target name="init" depends="prepare"
		description="Create the directory structure">
		<!-- Create the time stamp -->
		<tstamp />

		<echo
			message="############################################################################" />
		<echo message="# PROJECT NAME:       ${project.name}" />
		<echo message="# ANT VERSION:        ${ant.version}" />
		<echo message="# BUILD ENVIRONMENT:  ${project.phase}" />
		<echo
			message="############################################################################" />

		<mkdir dir="${build.classes.dir}" />
		<mkdir dir="${build.dist.dir}" />
		<mkdir dir="${build.jars.dir}" />
		<mkdir dir="${build.javadoc.dir}" />
		<mkdir dir="${build.junit.dir}" />

		<path id="project.class.path">
			<fileset dir="${project.lib.dir}">
				<include name="**/*.jar" />
				<include name="**/*.zip" />
			</fileset>
		</path>

	</target>

	<!-- Clean build -->
	<target name="clean" depends="prepare"
		description="Cleans the entire ${build} directory trees">
		<delete dir="${project.build.dir}" />
	</target>

	<target name="cleancompile" depends="prepare">
		<delete dir="${build.classes.dir}" />
	</target>

	<target name="cleanjar" depends="prepare">
		<delete dir="${build.jars.dir}" />
	</target>


	<target name="cleandist" depends="prepare">
		<delete includeEmptyDirs="true" failonerror="false">
			<fileset dir="${build.dist.dir}" />
		</delete>
	</target>

	<!-- Compile source codes -->

	<!-- <target name="compile" depends="init, cleancompile,compress-css,compress-js" description="Compile the java code from ${src} into ${build}"> -->
	<target name="compile" depends="init"
		description="Compile the java code from ${src} into ${build}">

		<depend srcdir="${project.src.dir}"
			destdir="${build.classes.dir}" closure="yes" />

		<javac srcdir="${project.src.dir}"
			destdir="${build.classes.dir}" source="${project.java.version}"
			deprecation="on" fork="yes" optimize="true" debug="true"
			debuglevel="lines,vars,source">
			<classpath refid="project.class.path" />
			<compilerarg line="-encoding UTF-8 " />
		</javac>
	</target>

	<!-- Package compiled classes to a single acrhive file -->
	<target name="jar" depends="cleanjar,compile"
		description="Jars up the build directory">
		<mkdir dir="${build.jars.dir}" />
		<jar destfile="${build.jars.dir}/${project.code}.jar"
			basedir="${build.classes.dir}" compress="yes" update="yes">
			<exclude name="*.properties" />
			<exclude name="spring/**.*" />
			<exclude name="*.xml" />
		</jar>
	</target>

	<!-- Make a distributeable folder which includes all necessary files -->
	<target name="dist" depends="jar" />

	<!-- Make a distributeable folder which includes all necessary files -->

	<!-- Generate java documents from java comments -->
	<target name="javadoc" depends="init"
		description="generate java documents from java comments">
		<mkdir dir="${build.javadoc.dir}" />
		<javadoc packagenames="*" sourcepath="${project.src.dir}"
			destdir="${build.javadoc.dir}" protected="true" version="true"
			author="true" use="true" windowtitle="${project.name} API">
			<doctitle>&lt;h1&gt;${project.name}&lt;/h1&gt;</doctitle>
			<bottom>&lt;i&gt;${project.copyright}&lt;/i&gt;</bottom>
			<classpath refid="project.class.path" />
		</javadoc>
	</target>

	<!-- Junit Testing -->
	<target name="junit" depends="compile">
		<junit printsummary="yes" haltonfailure="yes" showoutput="yes"
			description="run a batch of unit tests">
			<classpath refid="project.class.path" />
			<classpath>
				<pathelement path="${project.conf.dir}" />
				<pathelement path="${build.classes.dir}" />
			</classpath>
			<formatter type="xml" />
			<!-- Batch Junit Testing - Run all *Tester.java -->
			<batchtest fork="yes" todir="${build.junit.dir}">
				<fileset dir="${project.test.dir}">
					<include name="**/*Test.*" />
				</fileset>
			</batchtest>
		</junit>
	</target>

</project>
